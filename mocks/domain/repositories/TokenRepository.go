// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// TokenRepository is an autogenerated mock type for the TokenRepository type
type TokenRepository struct {
	mock.Mock
}

type TokenRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenRepository) EXPECT() *TokenRepository_Expecter {
	return &TokenRepository_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: user
func (_m *TokenRepository) GenerateToken(user *entities.User) (string, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*entities.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenRepository_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type TokenRepository_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - user *entities.User
func (_e *TokenRepository_Expecter) GenerateToken(user interface{}) *TokenRepository_GenerateToken_Call {
	return &TokenRepository_GenerateToken_Call{Call: _e.mock.On("GenerateToken", user)}
}

func (_c *TokenRepository_GenerateToken_Call) Run(run func(user *entities.User)) *TokenRepository_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.User))
	})
	return _c
}

func (_c *TokenRepository_GenerateToken_Call) Return(_a0 string, _a1 error) *TokenRepository_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenRepository_GenerateToken_Call) RunAndReturn(run func(*entities.User) (string, error)) *TokenRepository_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ParseToken provides a mock function with given fields: tokenStr
func (_m *TokenRepository) ParseToken(tokenStr string) (*entities.Claims, error) {
	ret := _m.Called(tokenStr)

	if len(ret) == 0 {
		panic("no return value specified for ParseToken")
	}

	var r0 *entities.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.Claims, error)); ok {
		return rf(tokenStr)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.Claims); ok {
		r0 = rf(tokenStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenRepository_ParseToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseToken'
type TokenRepository_ParseToken_Call struct {
	*mock.Call
}

// ParseToken is a helper method to define mock.On call
//   - tokenStr string
func (_e *TokenRepository_Expecter) ParseToken(tokenStr interface{}) *TokenRepository_ParseToken_Call {
	return &TokenRepository_ParseToken_Call{Call: _e.mock.On("ParseToken", tokenStr)}
}

func (_c *TokenRepository_ParseToken_Call) Run(run func(tokenStr string)) *TokenRepository_ParseToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TokenRepository_ParseToken_Call) Return(_a0 *entities.Claims, _a1 error) *TokenRepository_ParseToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenRepository_ParseToken_Call) RunAndReturn(run func(string) (*entities.Claims, error)) *TokenRepository_ParseToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenRepository creates a new instance of TokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenRepository {
	mock := &TokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
