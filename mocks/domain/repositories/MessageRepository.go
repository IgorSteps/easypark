// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

type MessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageRepository) EXPECT() *MessageRepository_Expecter {
	return &MessageRepository_Expecter{mock: &_m.Mock}
}

// Receive provides a mock function with given fields:
func (_m *MessageRepository) Receive() (<-chan entities.Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 <-chan entities.Message
	var r1 error
	if rf, ok := ret.Get(0).(func() (<-chan entities.Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() <-chan entities.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan entities.Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageRepository_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type MessageRepository_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
func (_e *MessageRepository_Expecter) Receive() *MessageRepository_Receive_Call {
	return &MessageRepository_Receive_Call{Call: _e.mock.On("Receive")}
}

func (_c *MessageRepository_Receive_Call) Run(run func()) *MessageRepository_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageRepository_Receive_Call) Return(_a0 <-chan entities.Message, _a1 error) *MessageRepository_Receive_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageRepository_Receive_Call) RunAndReturn(run func() (<-chan entities.Message, error)) *MessageRepository_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: msg
func (_m *MessageRepository) Send(msg entities.Message) error {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Message) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageRepository_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MessageRepository_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - msg entities.Message
func (_e *MessageRepository_Expecter) Send(msg interface{}) *MessageRepository_Send_Call {
	return &MessageRepository_Send_Call{Call: _e.mock.On("Send", msg)}
}

func (_c *MessageRepository_Send_Call) Run(run func(msg entities.Message)) *MessageRepository_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Message))
	})
	return _c
}

func (_c *MessageRepository_Send_Call) Return(_a0 error) *MessageRepository_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageRepository_Send_Call) RunAndReturn(run func(entities.Message) error) *MessageRepository_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
