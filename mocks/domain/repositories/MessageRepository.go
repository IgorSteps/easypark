// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

type MessageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageRepository) EXPECT() *MessageRepository_Expecter {
	return &MessageRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: message
func (_m *MessageRepository) Create(message *entities.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MessageRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - message *entities.Message
func (_e *MessageRepository_Expecter) Create(message interface{}) *MessageRepository_Create_Call {
	return &MessageRepository_Create_Call{Call: _e.mock.On("Create", message)}
}

func (_c *MessageRepository_Create_Call) Run(run func(message *entities.Message)) *MessageRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Message))
	})
	return _c
}

func (_c *MessageRepository_Create_Call) Return(_a0 error) *MessageRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageRepository_Create_Call) RunAndReturn(run func(*entities.Message) error) *MessageRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: messages
func (_m *MessageRepository) Delete(messages []entities.Message) error {
	ret := _m.Called(messages)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]entities.Message) error); ok {
		r0 = rf(messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessageRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MessageRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - messages []entities.Message
func (_e *MessageRepository_Expecter) Delete(messages interface{}) *MessageRepository_Delete_Call {
	return &MessageRepository_Delete_Call{Call: _e.mock.On("Delete", messages)}
}

func (_c *MessageRepository_Delete_Call) Run(run func(messages []entities.Message)) *MessageRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entities.Message))
	})
	return _c
}

func (_c *MessageRepository_Delete_Call) Return(_a0 error) *MessageRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageRepository_Delete_Call) RunAndReturn(run func([]entities.Message) error) *MessageRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetManyForUser provides a mock function with given fields: userID
func (_m *MessageRepository) GetManyForUser(userID uuid.UUID) ([]entities.Message, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetManyForUser")
	}

	var r0 []entities.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]entities.Message, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []entities.Message); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageRepository_GetManyForUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManyForUser'
type MessageRepository_GetManyForUser_Call struct {
	*mock.Call
}

// GetManyForUser is a helper method to define mock.On call
//   - userID uuid.UUID
func (_e *MessageRepository_Expecter) GetManyForUser(userID interface{}) *MessageRepository_GetManyForUser_Call {
	return &MessageRepository_GetManyForUser_Call{Call: _e.mock.On("GetManyForUser", userID)}
}

func (_c *MessageRepository_GetManyForUser_Call) Run(run func(userID uuid.UUID)) *MessageRepository_GetManyForUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MessageRepository_GetManyForUser_Call) Return(_a0 []entities.Message, _a1 error) *MessageRepository_GetManyForUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessageRepository_GetManyForUser_Call) RunAndReturn(run func(uuid.UUID) ([]entities.Message, error)) *MessageRepository_GetManyForUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
