// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AlertCreator is an autogenerated mock type for the AlertCreator type
type AlertCreator struct {
	mock.Mock
}

type AlertCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertCreator) EXPECT() *AlertCreator_Expecter {
	return &AlertCreator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, alertType, msg, driverID, spaceID
func (_m *AlertCreator) Execute(ctx context.Context, alertType entities.AlertType, msg string, driverID uuid.UUID, spaceID uuid.UUID) (*entities.Alert, error) {
	ret := _m.Called(ctx, alertType, msg, driverID, spaceID)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *entities.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.AlertType, string, uuid.UUID, uuid.UUID) (*entities.Alert, error)); ok {
		return rf(ctx, alertType, msg, driverID, spaceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.AlertType, string, uuid.UUID, uuid.UUID) *entities.Alert); ok {
		r0 = rf(ctx, alertType, msg, driverID, spaceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.AlertType, string, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, alertType, msg, driverID, spaceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlertCreator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type AlertCreator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - alertType entities.AlertType
//   - msg string
//   - driverID uuid.UUID
//   - spaceID uuid.UUID
func (_e *AlertCreator_Expecter) Execute(ctx interface{}, alertType interface{}, msg interface{}, driverID interface{}, spaceID interface{}) *AlertCreator_Execute_Call {
	return &AlertCreator_Execute_Call{Call: _e.mock.On("Execute", ctx, alertType, msg, driverID, spaceID)}
}

func (_c *AlertCreator_Execute_Call) Run(run func(ctx context.Context, alertType entities.AlertType, msg string, driverID uuid.UUID, spaceID uuid.UUID)) *AlertCreator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.AlertType), args[2].(string), args[3].(uuid.UUID), args[4].(uuid.UUID))
	})
	return _c
}

func (_c *AlertCreator_Execute_Call) Return(_a0 *entities.Alert, _a1 error) *AlertCreator_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlertCreator_Execute_Call) RunAndReturn(run func(context.Context, entities.AlertType, string, uuid.UUID, uuid.UUID) (*entities.Alert, error)) *AlertCreator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlertCreator creates a new instance of AlertCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertCreator {
	mock := &AlertCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
