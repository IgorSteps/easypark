// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ParkingSpaceRepository is an autogenerated mock type for the ParkingSpaceRepository type
type ParkingSpaceRepository struct {
	mock.Mock
}

type ParkingSpaceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ParkingSpaceRepository) EXPECT() *ParkingSpaceRepository_Expecter {
	return &ParkingSpaceRepository_Expecter{mock: &_m.Mock}
}

// GetParkingSpaceByID provides a mock function with given fields: ctx, id
func (_m *ParkingSpaceRepository) GetParkingSpaceByID(ctx context.Context, id uuid.UUID) (entities.ParkingSpace, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetParkingSpaceByID")
	}

	var r0 entities.ParkingSpace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entities.ParkingSpace, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entities.ParkingSpace); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.ParkingSpace)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParkingSpaceRepository_GetParkingSpaceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetParkingSpaceByID'
type ParkingSpaceRepository_GetParkingSpaceByID_Call struct {
	*mock.Call
}

// GetParkingSpaceByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ParkingSpaceRepository_Expecter) GetParkingSpaceByID(ctx interface{}, id interface{}) *ParkingSpaceRepository_GetParkingSpaceByID_Call {
	return &ParkingSpaceRepository_GetParkingSpaceByID_Call{Call: _e.mock.On("GetParkingSpaceByID", ctx, id)}
}

func (_c *ParkingSpaceRepository_GetParkingSpaceByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ParkingSpaceRepository_GetParkingSpaceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ParkingSpaceRepository_GetParkingSpaceByID_Call) Return(_a0 entities.ParkingSpace, _a1 error) *ParkingSpaceRepository_GetParkingSpaceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ParkingSpaceRepository_GetParkingSpaceByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entities.ParkingSpace, error)) *ParkingSpaceRepository_GetParkingSpaceByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, space
func (_m *ParkingSpaceRepository) Save(ctx context.Context, space *entities.ParkingSpace) error {
	ret := _m.Called(ctx, space)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.ParkingSpace) error); ok {
		r0 = rf(ctx, space)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParkingSpaceRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ParkingSpaceRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - space *entities.ParkingSpace
func (_e *ParkingSpaceRepository_Expecter) Save(ctx interface{}, space interface{}) *ParkingSpaceRepository_Save_Call {
	return &ParkingSpaceRepository_Save_Call{Call: _e.mock.On("Save", ctx, space)}
}

func (_c *ParkingSpaceRepository_Save_Call) Run(run func(ctx context.Context, space *entities.ParkingSpace)) *ParkingSpaceRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.ParkingSpace))
	})
	return _c
}

func (_c *ParkingSpaceRepository_Save_Call) Return(_a0 error) *ParkingSpaceRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ParkingSpaceRepository_Save_Call) RunAndReturn(run func(context.Context, *entities.ParkingSpace) error) *ParkingSpaceRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewParkingSpaceRepository creates a new instance of ParkingSpaceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParkingSpaceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParkingSpaceRepository {
	mock := &ParkingSpaceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
