// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

type NotificationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationRepository) EXPECT() *NotificationRepository_Expecter {
	return &NotificationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, notification
func (_m *NotificationRepository) Create(ctx context.Context, notification *entities.Notification) error {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Notification) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NotificationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - notification *entities.Notification
func (_e *NotificationRepository_Expecter) Create(ctx interface{}, notification interface{}) *NotificationRepository_Create_Call {
	return &NotificationRepository_Create_Call{Call: _e.mock.On("Create", ctx, notification)}
}

func (_c *NotificationRepository_Create_Call) Run(run func(ctx context.Context, notification *entities.Notification)) *NotificationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Notification))
	})
	return _c
}

func (_c *NotificationRepository_Create_Call) Return(_a0 error) *NotificationRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.Notification) error) *NotificationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
