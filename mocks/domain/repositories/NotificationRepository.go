// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

type NotificationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationRepository) EXPECT() *NotificationRepository_Expecter {
	return &NotificationRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, notification
func (_m *NotificationRepository) Create(ctx context.Context, notification *entities.Notification) error {
	ret := _m.Called(ctx, notification)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Notification) error); ok {
		r0 = rf(ctx, notification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NotificationRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - notification *entities.Notification
func (_e *NotificationRepository_Expecter) Create(ctx interface{}, notification interface{}) *NotificationRepository_Create_Call {
	return &NotificationRepository_Create_Call{Call: _e.mock.On("Create", ctx, notification)}
}

func (_c *NotificationRepository_Create_Call) Run(run func(ctx context.Context, notification *entities.Notification)) *NotificationRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Notification))
	})
	return _c
}

func (_c *NotificationRepository_Create_Call) Return(_a0 error) *NotificationRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.Notification) error) *NotificationRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *NotificationRepository) GetAll(ctx context.Context) ([]entities.Notification, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Notification, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Notification); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type NotificationRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *NotificationRepository_Expecter) GetAll(ctx interface{}) *NotificationRepository_GetAll_Call {
	return &NotificationRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *NotificationRepository_GetAll_Call) Run(run func(ctx context.Context)) *NotificationRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *NotificationRepository_GetAll_Call) Return(_a0 []entities.Notification, _a1 error) *NotificationRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]entities.Notification, error)) *NotificationRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
