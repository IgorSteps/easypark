// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// AlertRepository is an autogenerated mock type for the AlertRepository type
type AlertRepository struct {
	mock.Mock
}

type AlertRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AlertRepository) EXPECT() *AlertRepository_Expecter {
	return &AlertRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, alert
func (_m *AlertRepository) Create(ctx context.Context, alert *entities.Alert) error {
	ret := _m.Called(ctx, alert)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Alert) error); ok {
		r0 = rf(ctx, alert)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AlertRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AlertRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - alert *entities.Alert
func (_e *AlertRepository_Expecter) Create(ctx interface{}, alert interface{}) *AlertRepository_Create_Call {
	return &AlertRepository_Create_Call{Call: _e.mock.On("Create", ctx, alert)}
}

func (_c *AlertRepository_Create_Call) Run(run func(ctx context.Context, alert *entities.Alert)) *AlertRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Alert))
	})
	return _c
}

func (_c *AlertRepository_Create_Call) Return(_a0 error) *AlertRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AlertRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.Alert) error) *AlertRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *AlertRepository) GetAll(ctx context.Context) ([]entities.Alert, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Alert, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Alert); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Alert)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlertRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type AlertRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *AlertRepository_Expecter) GetAll(ctx interface{}) *AlertRepository_GetAll_Call {
	return &AlertRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *AlertRepository_GetAll_Call) Run(run func(ctx context.Context)) *AlertRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *AlertRepository_GetAll_Call) Return(_a0 []entities.Alert, _a1 error) *AlertRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlertRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]entities.Alert, error)) *AlertRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetSingle provides a mock function with given fields: ctx, alertID
func (_m *AlertRepository) GetSingle(ctx context.Context, alertID uuid.UUID) (entities.Alert, error) {
	ret := _m.Called(ctx, alertID)

	if len(ret) == 0 {
		panic("no return value specified for GetSingle")
	}

	var r0 entities.Alert
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entities.Alert, error)); ok {
		return rf(ctx, alertID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entities.Alert); ok {
		r0 = rf(ctx, alertID)
	} else {
		r0 = ret.Get(0).(entities.Alert)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, alertID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AlertRepository_GetSingle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSingle'
type AlertRepository_GetSingle_Call struct {
	*mock.Call
}

// GetSingle is a helper method to define mock.On call
//   - ctx context.Context
//   - alertID uuid.UUID
func (_e *AlertRepository_Expecter) GetSingle(ctx interface{}, alertID interface{}) *AlertRepository_GetSingle_Call {
	return &AlertRepository_GetSingle_Call{Call: _e.mock.On("GetSingle", ctx, alertID)}
}

func (_c *AlertRepository_GetSingle_Call) Run(run func(ctx context.Context, alertID uuid.UUID)) *AlertRepository_GetSingle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *AlertRepository_GetSingle_Call) Return(_a0 entities.Alert, _a1 error) *AlertRepository_GetSingle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AlertRepository_GetSingle_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entities.Alert, error)) *AlertRepository_GetSingle_Call {
	_c.Call.Return(run)
	return _c
}

// NewAlertRepository creates a new instance of AlertRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAlertRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AlertRepository {
	mock := &AlertRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
