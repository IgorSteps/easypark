// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// ParkingLotRepository is an autogenerated mock type for the ParkingLotRepository type
type ParkingLotRepository struct {
	mock.Mock
}

type ParkingLotRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ParkingLotRepository) EXPECT() *ParkingLotRepository_Expecter {
	return &ParkingLotRepository_Expecter{mock: &_m.Mock}
}

// CreateParkingLot provides a mock function with given fields: ctx, parkingLot
func (_m *ParkingLotRepository) CreateParkingLot(ctx context.Context, parkingLot *entities.ParkingLot) error {
	ret := _m.Called(ctx, parkingLot)

	if len(ret) == 0 {
		panic("no return value specified for CreateParkingLot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.ParkingLot) error); ok {
		r0 = rf(ctx, parkingLot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ParkingLotRepository_CreateParkingLot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateParkingLot'
type ParkingLotRepository_CreateParkingLot_Call struct {
	*mock.Call
}

// CreateParkingLot is a helper method to define mock.On call
//   - ctx context.Context
//   - parkingLot *entities.ParkingLot
func (_e *ParkingLotRepository_Expecter) CreateParkingLot(ctx interface{}, parkingLot interface{}) *ParkingLotRepository_CreateParkingLot_Call {
	return &ParkingLotRepository_CreateParkingLot_Call{Call: _e.mock.On("CreateParkingLot", ctx, parkingLot)}
}

func (_c *ParkingLotRepository_CreateParkingLot_Call) Run(run func(ctx context.Context, parkingLot *entities.ParkingLot)) *ParkingLotRepository_CreateParkingLot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.ParkingLot))
	})
	return _c
}

func (_c *ParkingLotRepository_CreateParkingLot_Call) Return(_a0 error) *ParkingLotRepository_CreateParkingLot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ParkingLotRepository_CreateParkingLot_Call) RunAndReturn(run func(context.Context, *entities.ParkingLot) error) *ParkingLotRepository_CreateParkingLot_Call {
	_c.Call.Return(run)
	return _c
}

// NewParkingLotRepository creates a new instance of ParkingLotRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParkingLotRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParkingLotRepository {
	mock := &ParkingLotRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
