// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

type Datastore_Expecter struct {
	mock *mock.Mock
}

func (_m *Datastore) EXPECT() *Datastore_Expecter {
	return &Datastore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, value
func (_m *Datastore) Create(ctx context.Context, value interface{}) *gorm.DB {
	ret := _m.Called(ctx, value)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *gorm.DB); ok {
		r0 = rf(ctx, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Datastore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Datastore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - value interface{}
func (_e *Datastore_Expecter) Create(ctx interface{}, value interface{}) *Datastore_Create_Call {
	return &Datastore_Create_Call{Call: _e.mock.On("Create", ctx, value)}
}

func (_c *Datastore_Create_Call) Run(run func(ctx context.Context, value interface{})) *Datastore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Datastore_Create_Call) Return(_a0 *gorm.DB) *Datastore_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_Create_Call) RunAndReturn(run func(context.Context, interface{}) *gorm.DB) *Datastore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Where provides a mock function with given fields: ctx, query, args
func (_m *Datastore) Where(ctx context.Context, query interface{}, args ...interface{}) *gorm.DB {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Where")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...interface{}) *gorm.DB); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// Datastore_Where_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Where'
type Datastore_Where_Call struct {
	*mock.Call
}

// Where is a helper method to define mock.On call
//   - ctx context.Context
//   - query interface{}
//   - args ...interface{}
func (_e *Datastore_Expecter) Where(ctx interface{}, query interface{}, args ...interface{}) *Datastore_Where_Call {
	return &Datastore_Where_Call{Call: _e.mock.On("Where",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Datastore_Where_Call) Run(run func(ctx context.Context, query interface{}, args ...interface{})) *Datastore_Where_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Datastore_Where_Call) Return(_a0 *gorm.DB) *Datastore_Where_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Datastore_Where_Call) RunAndReturn(run func(context.Context, interface{}, ...interface{}) *gorm.DB) *Datastore_Where_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatastore creates a new instance of Datastore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatastore(t interface {
	mock.TestingT
	Cleanup(func())
}) *Datastore {
	mock := &Datastore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
