// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ParkingSpaceFacade is an autogenerated mock type for the ParkingSpaceFacade type
type ParkingSpaceFacade struct {
	mock.Mock
}

type ParkingSpaceFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *ParkingSpaceFacade) EXPECT() *ParkingSpaceFacade_Expecter {
	return &ParkingSpaceFacade_Expecter{mock: &_m.Mock}
}

// GetSingleParkingSpace provides a mock function with given fields: ctx, id
func (_m *ParkingSpaceFacade) GetSingleParkingSpace(ctx context.Context, id uuid.UUID) (entities.ParkingSpace, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSingleParkingSpace")
	}

	var r0 entities.ParkingSpace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entities.ParkingSpace, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entities.ParkingSpace); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.ParkingSpace)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParkingSpaceFacade_GetSingleParkingSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSingleParkingSpace'
type ParkingSpaceFacade_GetSingleParkingSpace_Call struct {
	*mock.Call
}

// GetSingleParkingSpace is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ParkingSpaceFacade_Expecter) GetSingleParkingSpace(ctx interface{}, id interface{}) *ParkingSpaceFacade_GetSingleParkingSpace_Call {
	return &ParkingSpaceFacade_GetSingleParkingSpace_Call{Call: _e.mock.On("GetSingleParkingSpace", ctx, id)}
}

func (_c *ParkingSpaceFacade_GetSingleParkingSpace_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ParkingSpaceFacade_GetSingleParkingSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ParkingSpaceFacade_GetSingleParkingSpace_Call) Return(_a0 entities.ParkingSpace, _a1 error) *ParkingSpaceFacade_GetSingleParkingSpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ParkingSpaceFacade_GetSingleParkingSpace_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entities.ParkingSpace, error)) *ParkingSpaceFacade_GetSingleParkingSpace_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateParkingSpaceStatus provides a mock function with given fields: ctx, id, status
func (_m *ParkingSpaceFacade) UpdateParkingSpaceStatus(ctx context.Context, id uuid.UUID, status string) (entities.ParkingSpace, error) {
	ret := _m.Called(ctx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParkingSpaceStatus")
	}

	var r0 entities.ParkingSpace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (entities.ParkingSpace, error)); ok {
		return rf(ctx, id, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) entities.ParkingSpace); ok {
		r0 = rf(ctx, id, status)
	} else {
		r0 = ret.Get(0).(entities.ParkingSpace)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParkingSpaceFacade_UpdateParkingSpaceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateParkingSpaceStatus'
type ParkingSpaceFacade_UpdateParkingSpaceStatus_Call struct {
	*mock.Call
}

// UpdateParkingSpaceStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - status string
func (_e *ParkingSpaceFacade_Expecter) UpdateParkingSpaceStatus(ctx interface{}, id interface{}, status interface{}) *ParkingSpaceFacade_UpdateParkingSpaceStatus_Call {
	return &ParkingSpaceFacade_UpdateParkingSpaceStatus_Call{Call: _e.mock.On("UpdateParkingSpaceStatus", ctx, id, status)}
}

func (_c *ParkingSpaceFacade_UpdateParkingSpaceStatus_Call) Run(run func(ctx context.Context, id uuid.UUID, status string)) *ParkingSpaceFacade_UpdateParkingSpaceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ParkingSpaceFacade_UpdateParkingSpaceStatus_Call) Return(_a0 entities.ParkingSpace, _a1 error) *ParkingSpaceFacade_UpdateParkingSpaceStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ParkingSpaceFacade_UpdateParkingSpaceStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (entities.ParkingSpace, error)) *ParkingSpaceFacade_UpdateParkingSpaceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewParkingSpaceFacade creates a new instance of ParkingSpaceFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParkingSpaceFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParkingSpaceFacade {
	mock := &ParkingSpaceFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
