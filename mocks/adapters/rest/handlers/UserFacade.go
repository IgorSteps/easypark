// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserFacade is an autogenerated mock type for the UserFacade type
type UserFacade struct {
	mock.Mock
}

type UserFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *UserFacade) EXPECT() *UserFacade_Expecter {
	return &UserFacade_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, driver
func (_m *UserFacade) CreateUser(ctx context.Context, driver *entities.User) error {
	ret := _m.Called(ctx, driver)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.User) error); ok {
		r0 = rf(ctx, driver)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserFacade_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserFacade_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - driver *entities.User
func (_e *UserFacade_Expecter) CreateUser(ctx interface{}, driver interface{}) *UserFacade_CreateUser_Call {
	return &UserFacade_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, driver)}
}

func (_c *UserFacade_CreateUser_Call) Run(run func(ctx context.Context, driver *entities.User)) *UserFacade_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.User))
	})
	return _c
}

func (_c *UserFacade_CreateUser_Call) Return(_a0 error) *UserFacade_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserFacade_CreateUser_Call) RunAndReturn(run func(context.Context, *entities.User) error) *UserFacade_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserFacade creates a new instance of UserFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserFacade {
	mock := &UserFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
