// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/IgorSteps/easypark/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"
)

// ParkingLotFacade is an autogenerated mock type for the ParkingLotFacade type
type ParkingLotFacade struct {
	mock.Mock
}

type ParkingLotFacade_Expecter struct {
	mock *mock.Mock
}

func (_m *ParkingLotFacade) EXPECT() *ParkingLotFacade_Expecter {
	return &ParkingLotFacade_Expecter{mock: &_m.Mock}
}

// CreateParkingLot provides a mock function with given fields: ctx, name, capacity
func (_m *ParkingLotFacade) CreateParkingLot(ctx context.Context, name string, capacity int) (entities.ParkingLot, error) {
	ret := _m.Called(ctx, name, capacity)

	if len(ret) == 0 {
		panic("no return value specified for CreateParkingLot")
	}

	var r0 entities.ParkingLot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (entities.ParkingLot, error)); ok {
		return rf(ctx, name, capacity)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) entities.ParkingLot); ok {
		r0 = rf(ctx, name, capacity)
	} else {
		r0 = ret.Get(0).(entities.ParkingLot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, name, capacity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParkingLotFacade_CreateParkingLot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateParkingLot'
type ParkingLotFacade_CreateParkingLot_Call struct {
	*mock.Call
}

// CreateParkingLot is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - capacity int
func (_e *ParkingLotFacade_Expecter) CreateParkingLot(ctx interface{}, name interface{}, capacity interface{}) *ParkingLotFacade_CreateParkingLot_Call {
	return &ParkingLotFacade_CreateParkingLot_Call{Call: _e.mock.On("CreateParkingLot", ctx, name, capacity)}
}

func (_c *ParkingLotFacade_CreateParkingLot_Call) Run(run func(ctx context.Context, name string, capacity int)) *ParkingLotFacade_CreateParkingLot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *ParkingLotFacade_CreateParkingLot_Call) Return(_a0 entities.ParkingLot, _a1 error) *ParkingLotFacade_CreateParkingLot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ParkingLotFacade_CreateParkingLot_Call) RunAndReturn(run func(context.Context, string, int) (entities.ParkingLot, error)) *ParkingLotFacade_CreateParkingLot_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllParkingLots provides a mock function with given fields: ctx
func (_m *ParkingLotFacade) GetAllParkingLots(ctx context.Context) ([]entities.ParkingLot, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllParkingLots")
	}

	var r0 []entities.ParkingLot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.ParkingLot, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.ParkingLot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.ParkingLot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParkingLotFacade_GetAllParkingLots_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllParkingLots'
type ParkingLotFacade_GetAllParkingLots_Call struct {
	*mock.Call
}

// GetAllParkingLots is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ParkingLotFacade_Expecter) GetAllParkingLots(ctx interface{}) *ParkingLotFacade_GetAllParkingLots_Call {
	return &ParkingLotFacade_GetAllParkingLots_Call{Call: _e.mock.On("GetAllParkingLots", ctx)}
}

func (_c *ParkingLotFacade_GetAllParkingLots_Call) Run(run func(ctx context.Context)) *ParkingLotFacade_GetAllParkingLots_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ParkingLotFacade_GetAllParkingLots_Call) Return(_a0 []entities.ParkingLot, _a1 error) *ParkingLotFacade_GetAllParkingLots_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ParkingLotFacade_GetAllParkingLots_Call) RunAndReturn(run func(context.Context) ([]entities.ParkingLot, error)) *ParkingLotFacade_GetAllParkingLots_Call {
	_c.Call.Return(run)
	return _c
}

// NewParkingLotFacade creates a new instance of ParkingLotFacade. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParkingLotFacade(t interface {
	mock.TestingT
	Cleanup(func())
}) *ParkingLotFacade {
	mock := &ParkingLotFacade{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
