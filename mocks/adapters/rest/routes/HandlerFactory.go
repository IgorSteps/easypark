// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HandlerFactory is an autogenerated mock type for the HandlerFactory type
type HandlerFactory struct {
	mock.Mock
}

type HandlerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerFactory) EXPECT() *HandlerFactory_Expecter {
	return &HandlerFactory_Expecter{mock: &_m.Mock}
}

// UserCreate provides a mock function with given fields:
func (_m *HandlerFactory) UserCreate() http.Handler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserCreate")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// HandlerFactory_UserCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserCreate'
type HandlerFactory_UserCreate_Call struct {
	*mock.Call
}

// UserCreate is a helper method to define mock.On call
func (_e *HandlerFactory_Expecter) UserCreate() *HandlerFactory_UserCreate_Call {
	return &HandlerFactory_UserCreate_Call{Call: _e.mock.On("UserCreate")}
}

func (_c *HandlerFactory_UserCreate_Call) Run(run func()) *HandlerFactory_UserCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HandlerFactory_UserCreate_Call) Return(_a0 http.Handler) *HandlerFactory_UserCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HandlerFactory_UserCreate_Call) RunAndReturn(run func() http.Handler) *HandlerFactory_UserCreate_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandlerFactory creates a new instance of HandlerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandlerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandlerFactory {
	mock := &HandlerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
