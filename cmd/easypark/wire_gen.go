// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/IgorSteps/easypark/internal/adapters/datastore"
	"github.com/IgorSteps/easypark/internal/adapters/rest/handlers"
	"github.com/IgorSteps/easypark/internal/adapters/rest/middleware"
	"github.com/IgorSteps/easypark/internal/adapters/rest/routes"
	"github.com/IgorSteps/easypark/internal/adapters/usecasefacades"
	"github.com/IgorSteps/easypark/internal/drivers/auth"
	"github.com/IgorSteps/easypark/internal/drivers/config"
	"github.com/IgorSteps/easypark/internal/drivers/db"
	"github.com/IgorSteps/easypark/internal/drivers/httpserver"
	"github.com/IgorSteps/easypark/internal/drivers/logger"
	"github.com/IgorSteps/easypark/internal/usecases"
)

// Injectors from wire.go:

func BuildDIForApp() (*App, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	loggingConfig := configConfig.Logging
	logrusLogger := logger.NewLoggerFromConfig(loggingConfig)
	databaseConfig := configConfig.Database
	gormLogrusLogger := db.NewGormLogrusLoggerFromConfig(loggingConfig, logrusLogger)
	gormDB, err := db.NewDatabaseFromConfig(databaseConfig, gormLogrusLogger)
	if err != nil {
		return nil, err
	}
	gormWrapper := db.NewGormWrapper(gormDB)
	userPostgresRepository := datastore.NewUserPostgresRepository(gormWrapper, logrusLogger)
	registerUser := usecases.NewRegisterUser(logrusLogger, userPostgresRepository)
	authConfig := configConfig.Auth
	jwtTokenService, err := auth.NewJWTTokenServiceFromConfig(authConfig)
	if err != nil {
		return nil, err
	}
	authenticateUser := usecases.NewAuthenticateUser(logrusLogger, userPostgresRepository, jwtTokenService)
	userFacade := usecasefacades.NewUserFacade(registerUser, authenticateUser)
	handlerFactory := handlers.NewHandlerFactory(logrusLogger, userFacade)
	authMiddleware := middleware.NewAuthMiddleware(jwtTokenService, logrusLogger)
	router := routes.NewRouter(handlerFactory, authMiddleware, logrusLogger)
	httpConfig := configConfig.HTTP
	server := httpserver.NewServerFromConfig(router, httpConfig)
	app := NewApp(server, logrusLogger)
	return app, nil
}
